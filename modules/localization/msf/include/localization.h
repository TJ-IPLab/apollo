// Generated by gencpp from file readgps/localization.msg
// DO NOT EDIT!


#ifndef READGPS_MESSAGE_LOCALIZATION_H
#define READGPS_MESSAGE_LOCALIZATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "modules/localization/msf/include/Header.h"
#include "modules/localization/msf/include/Pose.h"
#include "modules/localization/msf/include/Uncertainty.h"

namespace readgps
{
template <class ContainerAllocator>
struct localization_
{
  typedef localization_<ContainerAllocator> Type;

  localization_()
    : header()
    , pose()
    , uncertainty()
    , measurement_time(0.0)  {
    }
  localization_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pose(_alloc)
    , uncertainty(_alloc)
    , measurement_time(0.0)  {
  (void)_alloc;
    }



   typedef  ::readgps::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::readgps::Pose_<ContainerAllocator>  _pose_type;
  _pose_type pose;

   typedef  ::readgps::Uncertainty_<ContainerAllocator>  _uncertainty_type;
  _uncertainty_type uncertainty;

   typedef double _measurement_time_type;
  _measurement_time_type measurement_time;





  typedef boost::shared_ptr< ::readgps::localization_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::readgps::localization_<ContainerAllocator> const> ConstPtr;

}; // struct localization_

typedef ::readgps::localization_<std::allocator<void> > localization;

typedef boost::shared_ptr< ::readgps::localization > localizationPtr;
typedef boost::shared_ptr< ::readgps::localization const> localizationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::readgps::localization_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::readgps::localization_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace readgps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'readgps': ['/home/ubuwgb/catkin_ws/src/readgps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::readgps::localization_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::readgps::localization_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readgps::localization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readgps::localization_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readgps::localization_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readgps::localization_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::readgps::localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "488071067687c740d74be25bed36a7c9";
  }

  static const char* value(const ::readgps::localization_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x488071067687c740ULL;
  static const uint64_t static_value2 = 0xd74be25bed36a7c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::readgps::localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "readgps/localization";
  }

  static const char* value(const ::readgps::localization_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::readgps::localization_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
Pose pose\n\
Uncertainty uncertainty\n\
float64 measurement_time\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: readgps/Pose\n\
PointENU position\n\
Quaternion orientation\n\
Point3D linear_velocity\n\
Point3D linear_acceleration\n\
Point3D angular_velocity\n\
float64 heading\n\
Point3D linear_acceleration_vrf\n\
Point3D angular_velocity_vrf\n\
Point3D euler_angles\n\
================================================================================\n\
MSG: readgps/PointENU\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: readgps/Quaternion\n\
float64 qx\n\
float64 qy\n\
float64 qz\n\
float64 qw\n\
================================================================================\n\
MSG: readgps/Point3D\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: readgps/Uncertainty\n\
Point3D position_std_dev\n\
Point3D orientation_std_dev\n\
Point3D linear_velocity_std_dev\n\
Point3D linear_acceleration_std_dev\n\
Point3D angular_velocity_std_dev\n\
";
  }

  static const char* value(const ::readgps::localization_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::readgps::localization_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pose);
      stream.next(m.uncertainty);
      stream.next(m.measurement_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct localization_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::readgps::localization_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::readgps::localization_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::readgps::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::readgps::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
    s << indent << "uncertainty: ";
    s << std::endl;
    Printer< ::readgps::Uncertainty_<ContainerAllocator> >::stream(s, indent + "  ", v.uncertainty);
    s << indent << "measurement_time: ";
    Printer<double>::stream(s, indent + "  ", v.measurement_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // READGPS_MESSAGE_LOCALIZATION_H
