// Generated by gencpp from file readgps/header.msg
// DO NOT EDIT!


#ifndef READGPS_MESSAGE_HEADER_H
#define READGPS_MESSAGE_HEADER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "modules/drivers/gnss/parser/include/statuspb.h"

namespace readgps
{
template <class ContainerAllocator>
struct header_
{
  typedef header_<ContainerAllocator> Type;

  header_()
    : timestamp_sec(0.0)
    , module_name()
    , sequence_num(0)
    , lidar_timestamp(0)
    , camera_timestamp(0)
    , radar_timestamp(0)
    , version(0)
    , status()
    , frame_id()  {
    }
  header_(const ContainerAllocator& _alloc)
    : timestamp_sec(0.0)
    , module_name(_alloc)
    , sequence_num(0)
    , lidar_timestamp(0)
    , camera_timestamp(0)
    , radar_timestamp(0)
    , version(0)
    , status(_alloc)
    , frame_id(_alloc)  {
  (void)_alloc;
    }



   typedef double _timestamp_sec_type;
  _timestamp_sec_type timestamp_sec;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _module_name_type;
  _module_name_type module_name;

   typedef uint32_t _sequence_num_type;
  _sequence_num_type sequence_num;

   typedef uint64_t _lidar_timestamp_type;
  _lidar_timestamp_type lidar_timestamp;

   typedef uint64_t _camera_timestamp_type;
  _camera_timestamp_type camera_timestamp;

   typedef uint64_t _radar_timestamp_type;
  _radar_timestamp_type radar_timestamp;

   typedef uint32_t _version_type;
  _version_type version;

   typedef  ::readgps::statuspb_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _frame_id_type;
  _frame_id_type frame_id;





  typedef boost::shared_ptr< ::readgps::header_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::readgps::header_<ContainerAllocator> const> ConstPtr;

}; // struct header_

typedef ::readgps::header_<std::allocator<void> > header;

typedef boost::shared_ptr< ::readgps::header > headerPtr;
typedef boost::shared_ptr< ::readgps::header const> headerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::readgps::header_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::readgps::header_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace readgps

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'readgps': ['/home/ubuwgb/catkin_ws/src/readgps/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::readgps::header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::readgps::header_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readgps::header_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::readgps::header_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readgps::header_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::readgps::header_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::readgps::header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b90db43a76fd9e6f9b99135f3d162d4d";
  }

  static const char* value(const ::readgps::header_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb90db43a76fd9e6fULL;
  static const uint64_t static_value2 = 0x9b99135f3d162d4dULL;
};

template<class ContainerAllocator>
struct DataType< ::readgps::header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "readgps/header";
  }

  static const char* value(const ::readgps::header_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::readgps::header_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 timestamp_sec\n\
\n\
string module_name\n\
\n\
uint32 sequence_num\n\
\n\
uint64 lidar_timestamp\n\
\n\
uint64 camera_timestamp\n\
\n\
uint64 radar_timestamp\n\
\n\
uint32 version\n\
\n\
statuspb status\n\
\n\
string frame_id\n\
\n\
\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: readgps/statuspb\n\
uint32 error_code\n\
string msg\n\
";
  }

  static const char* value(const ::readgps::header_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::readgps::header_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_sec);
      stream.next(m.module_name);
      stream.next(m.sequence_num);
      stream.next(m.lidar_timestamp);
      stream.next(m.camera_timestamp);
      stream.next(m.radar_timestamp);
      stream.next(m.version);
      stream.next(m.status);
      stream.next(m.frame_id);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct header_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::readgps::header_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::readgps::header_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_sec: ";
    Printer<double>::stream(s, indent + "  ", v.timestamp_sec);
    s << indent << "module_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.module_name);
    s << indent << "sequence_num: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sequence_num);
    s << indent << "lidar_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.lidar_timestamp);
    s << indent << "camera_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.camera_timestamp);
    s << indent << "radar_timestamp: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.radar_timestamp);
    s << indent << "version: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.version);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::readgps::statuspb_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.frame_id);
  }
};

} // namespace message_operations
} // namespace ros

#endif // READGPS_MESSAGE_HEADER_H
